import java.util.Scanner;
import java.rmi.registry.Registry;
import java.rmi.registry.LocateRegistry;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
        
public class ServerClass implements RemoteInterface {
        
    public String welcomeMessage(){
		return "..:: Bienvenido al Servidor ::...";
	}
	public long service(Integer a){
		final double NS_POR_SEGUNDO=1000000000;

		// se asigna el valor de la variable a a limite
	         int limite;
	         limite =a;
	         //inicia conteo de tiempo
	         long INICIO_NS = System.nanoTime();
	         System.out.println("1");
	         for(int i=1;i<limite;i++) {
	             int count=0;
	         for(int j=1;j<=i;j++) {
	             if(i%j==0)
	                 count++;
	             }
	            if(count==2)
	                //System.out.println(i);
	            	return i;
	         }
	         // finaliza el punto del proceso
			long DURACIÓN_NS = System.nanoTime()-INICIO_NS;
			//double DURACIÓN_S2  = DURACIÓN_NS / NS_POR_SEGUNDO;	
			//return "Test 2 resultados en Nanosegundos del servidor 1";
			return DURACIÓN_NS;
			//return DURACIÓN_S2;
	}
	public String goodByeMessage(){
		return "Se esta desconectando, Gracias por Utilizar nuestros Servicios, Vuelva Pronto";
	}
	
	public String sayHello() {
        return "Hello, world!";
    }
        
    public static void main(String args[]) {
        
        try {
            ServerClass obj = new ServerClass();
	    System.setProperty("java.rmi.server.hostname","192.168.56.101");
            RemoteInterface stub = (RemoteInterface) UnicastRemoteObject.exportObject(obj, 0);

            Registry registry = LocateRegistry.getRegistry();
            registry.bind("RemoteInterface", stub);

            System.err.println("Server ready... expecting connections");
        } catch (Exception e) {
            System.err.println("Server exception: " + e.toString());
            e.printStackTrace();
        }
    }
}

